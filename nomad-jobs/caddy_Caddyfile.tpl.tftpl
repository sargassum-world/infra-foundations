{{- $deviceSubname := env "node.unique.name" -}}
{{- $isOrchestrator := eq (env "meta.nomad_role") "orchestrator" -}}
{{- $sixplanePrefix := env "meta.zerotier_sixplane_prefix" -}}

# Caddyfile for {{$deviceSubname}}.d.${infra_domain}

{
	email "${acme_email}"
}

{{- /* Nomad */}}

# Service Nomad

{{/* e.g. nomad.s.device-name.d.foundations.infra.sargassum.world */ -}}
nomad.s.{{$deviceSubname}}.d.${zerotier_network_domain} {
	reverse_proxy localhost:4646

	tls "/secrets/ztoverlay.crt" "/secrets/ztoverlay.key"
}

{{/* e.g. nomad.s.device-name.d.infra.sargassum.world */ -}}
nomad.s.{{$deviceSubname}}.d.${infra_domain} {
	reverse_proxy localhost:4646
}

{{- if $isOrchestrator}}

{{/* e.g. nomad.s.foundations.infra.sargassum.world */ -}}
nomad.s.${zerotier_network_domain} {
	reverse_proxy localhost:4646

	tls "/secrets/ztoverlay.crt" "/secrets/ztoverlay.key"
}

{{/* e.g. nomad.s.infra.sargassum.world */ -}}
nomad.s.${infra_domain} {
	reverse_proxy localhost:4646
}

{{- end -}}

{{- /* Nomad Service Discovery */ -}}

{{- range $serviceInfo := nomadServices -}}
	{{- $enableFilterMatch := "caddy.enable=true" -}}
	{{- if not ($serviceInfo.Tags | contains $enableFilterMatch ) -}}
		{{- continue -}}
	{{- end}}

# Service {{$serviceInfo.Name -}}

	{{- /* Private domain names */ -}}
	{{- range $service := nomadService $serviceInfo.Name -}}
		{{- $upstreamAddress := $service.Address -}}
		{{- $isIPv6 := and (sprig_contains ":" $service.Address) (not (sprig_contains "://" $service.Address)) -}}
		{{- if $isIPv6 -}}
			{{- $upstreamAddress = printf "[%s]" $service.Address}}
		{{- end}}

{{/* e.g. service-name.s.foundations.infra.sargassum.world */ -}}
{{$service.Name | toLower}}.s.${zerotier_network_domain} {
	reverse_proxy {{$upstreamAddress}}:{{$service.Port}}

	tls "/secrets/ztoverlay.crt" "/secrets/ztoverlay.key"
}

		{{- $isExactIP := eq (env "attr.unique.network.ip-address") $service.Address -}}
		{{- $sixplanePrefixMatch := sprig_hasPrefix $sixplanePrefix $service.Address -}}
		{{- if not (or $isExactIP $sixplanePrefixMatch) -}}
			{{- continue -}}
		{{- end}}

{{/* e.g. service-name.s.device-name.d.foundations.infra.sargassum.world */ -}}
{{$service.Name | toLower}}.s.{{$deviceSubname}}.d.${zerotier_network_domain} {
	reverse_proxy {{$upstreamAddress}}:{{$service.Port}}

	tls "/secrets/ztoverlay.crt" "/secrets/ztoverlay.key"
}

	{{- end -}}

	{{- /* Public domain names */ -}}
	{{- range $service := nomadService $serviceInfo.Name -}}
		{{- $publicFilterMatch := "caddy.reverse_proxy.public=true" -}}
		{{- if not ($serviceInfo.Tags | contains $publicFilterMatch) -}}
			{{- continue -}}
		{{- end -}}

		{{- /* Auto-assigned public domain names */ -}}
		{{- $upstreamAddress := $service.Address -}}
		{{- $isIPv6 := and (sprig_contains ":" $service.Address) (not (sprig_contains "://" $service.Address)) -}}
		{{- if $isIPv6 -}}
			{{- $upstreamAddress = printf "[%s]" $service.Address}}
		{{- end}}

{{/* e.g. service-name.s.sargassum.world */ -}}
{{$service.Name | toLower}}.s.${root_domain} {
	reverse_proxy {{$upstreamAddress}}:{{$service.Port}}
}

		{{- if eq (env "attr.unique.network.ip-address") $service.Address}}

{{/* e.g. service-name.s.device-name.d.infra.sargassum.world */ -}}
{{$service.Name | toLower}}.s.{{$deviceSubname}}.d.${infra_domain} {
	reverse_proxy {{$upstreamAddress}}:{{$service.Port}}
}

		{{- end -}}
	{{- end -}}

	{{- /* Custom-assigned public domain names */ -}}
	{{- $customHostsFilterMatch := "caddy.reverse_proxy.custom_hosts=true" -}}
	{{- if not ($serviceInfo.Tags | contains $customHostsFilterMatch) -}}
		{{- continue -}}
	{{- end -}}

	{{- range $tag := $serviceInfo.Tags -}}
		{{- $customHostFilterPattern := `caddy\.reverse_proxy\.host=(.*)` -}}
		{{- if not ($tag | regexMatch $customHostFilterPattern) -}}
			{{- continue -}}
		{{- end -}}
		{{- range $service := nomadService $serviceInfo.Name -}}
			{{- $upstreamAddress := $service.Address -}}
			{{- $isIPv6 := and (sprig_contains ":" $service.Address) (not (sprig_contains "://" $service.Address)) -}}
			{{- if $isIPv6 -}}
				{{- $upstreamAddress = printf "[%s]" $service.Address}}
			{{- end -}}
			{{- $isExactIP := eq (env "attr.unique.network.ip-address") $service.Address -}}
			{{- $sixplanePrefixMatch := sprig_hasPrefix $sixplanePrefix $service.Address -}}
			{{- if not (or $isExactIP $sixplanePrefixMatch) -}}
				{{- continue -}}
			{{- end}}

{{/* e.g. custom-service-name.sargassum.world */ -}}
{{$tag | regexReplaceAll $customHostFilterPattern "$1"}} {
	reverse_proxy {{$upstreamAddress}}:{{$service.Port}}
}

		{{- end -}}
	{{- end -}}
{{- end}}

